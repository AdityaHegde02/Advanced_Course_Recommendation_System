# -*- coding: utf-8 -*-
"""final_IT414_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VXWb_xUa83o4W40IkGA247RtOr5oqw9o
"""

import pandas as pd

df=pd.read_csv('Coursera_500.csv')

print(list(df.columns))
#print(df)
print(df.iloc[0])

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk


nltk.download('punkt')
nltk.download('stopwords')


import re
import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')
import nltk
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('omw-1.4')
from nltk.stem import PorterStemmer
import pandas as pd

# Cosine similarity function

def cos_sim(s1,s2):
    vectorizer = TfidfVectorizer(stop_words='english')
    tfidf = vectorizer.fit_transform([s1, s2])
    cosine_similarities = cosine_similarity(tfidf[0], tfidf[1]).flatten()

    return cosine_similarities[0]

def para_cleaning(para):
    para=para.lower()
    clean_para = re.sub(r'\b\w*\\n\w*\b|[^\w\s]+', '', para)
    clean_para = re.sub(r'[\\\x00-\x1f\x7f]', '', clean_para)
    clean_para = clean_para.replace("\'s", "")
    
    stop_words = set(stopwords.words('english'))
    filtered_sentence = [word for word in clean_para.split() if word.lower() not in stop_words]
    filtered_para =' '.join(filtered_sentence)
    
    words = word_tokenize(filtered_para)
    lemmatizer = WordNetLemmatizer()
    lemmatized_words = [lemmatizer.lemmatize(word) for word in words]
    lemmatized_paragraph = ' '.join(lemmatized_words)
    
    words = word_tokenize(lemmatized_paragraph)
    ps = PorterStemmer()
    stemmed_words = [ps.stem(w) for w in words]
    stemmed_paragraph = " ".join(stemmed_words)
    return stemmed_paragraph



#print(cos_sim(,))

skills = set()

for i in range(500):
  temp = df['Skills'][i].split("  ")
  skills.update(temp)

print(len(skills))

print(skills)

skills = list(skills)

for i in range(len(skills)):
  skills[i] = skills[i].lower()


course_skill = []

print(skills)

def course_extract(course_desc,skills):

  course_skill = []


  #course_desc = 'javascript for beginners'

  course_desc = para_cleaning(course_desc)

  for i in skills:
    print(cos_sim(i,course_desc))
    if(cos_sim(course_desc,i)>0.03):
      course_skill.append(i)
  
  course_rank=[]

  for i in range(500):
    temp = para_cleaning(df['Course Description'][i])
    score = 0
    for j in course_skill:
      score+=cos_sim(temp,j)
    course_rank.append([i,score])

  course_rank.sort(key=lambda x: x[1])
  course_rank = course_rank[::-1]
  temp=[]
  for i in range(10):
    temp.append(df['Course Name'][course_rank[i][0]])

  return temp

#course_desc = ''

#print(course_skill)

#print(len(course_skill))

# course_rank=[]

# for i in range(500):
#   temp = para_cleaning(df['Course Description'][i])
#   score = 0
#   for j in course_skill:
#     score+=cos_sim(temp,j)
#   course_rank.append([i,score])

#course_rank.sort

course_desc = '''This course will introduce you to the wonderful world of Python programming!  We'll learn about the essential elements of programming and how to construct basic Python programs. We will cover expressions, variables, functions, logic, and conditionals, which are foundational concepts in computer programming. We will also teach you how to use Python modules, which enable you to benefit from the vast array of functionality that is already a part of the Python language. These concepts and skills will help you to begin to think like a computer programmer and to understand how to go about writing Python programs.  By the end of the course, you will be able to write short Python programs that are able to accomplish real, practical tasks. This course is the foundation for building expertise in Python programming. As the first course in a specialization, it provides the necessary building blocks for you to succeed at learning to write more complex Python programs.  This course uses Python 3.  While many Python programs continue to use Python 2, Python 3 is the future of the Python programming language. This first course will use a Python 3 version of the CodeSkulptor development environment, which is specifically designed to help beginning programmers learn quickly.  CodeSkulptor runs within any modern web browser and does not require you to install any software, allowing you to start writing and running small programs immediately.  In the later courses in this specialization,  we will help you to move to more sophisticated desktop development environments.'''



course_recommendations = course_extract(course_desc,skills)

print(course_recommendations)

#course_rank.sort(key=lambda x: x[1])

#course_rank = course_rank[::-1]

# for i in range(10):
#   print(df['Course Name'][course_rank[i][0]])

# Profile Data
def profile_predict(user_skills):
  

  course_rank=[]

  for i in range(500):
    temp = para_cleaning(df['Course Description'][i])
    score = 0
    for j in user_skills:
      score+=cos_sim(temp,j)
    course_rank.append([i,score])

  course_rank.sort(key=lambda x: x[1])
  course_rank = course_rank[::-1]
  temp = []
  for i in range(10):
    temp.append(df['Course Name'][course_rank[i][0]])
  return temp

user_skills = ['javascript','karate']


for i in (profile_predict(user_skills)):
  print(i)

# History of the User

History = [7,171]

history_skills=[]



for i in History:
  temp=df['Skills'][i].split("  ")
  for i in range(len(temp)):
    temp[i] = temp[i].lower()
  for i in temp:
    history_skills.append(i)


print(history_skills)


history_skills = set(history_skills)

course_recommends = profile_predict(history_skills)

for i in course_recommends:
  print(i)









import csv

with open('popular.csv', 'w', newline='') as file:
    writer = csv.writer(file)
     
    writer.writerow(['Course', "User"])
    writer.writerow([1, "Ash"])
    writer.writerow([1, "Gary"])
    writer.writerow([1, "Brock"])
    writer.writerow([1, "Ash"])
    writer.writerow([2, "Gary"])
    writer.writerow([1, "Brock"])
    writer.writerow([2, "Ash"])
    writer.writerow([1, "Gary"])
    writer.writerow([2, "Brock"])
    writer.writerow([1, "Ash"])
    writer.writerow([1, "Gary"])
    writer.writerow([2, "Brock"])
    writer.writerow([1, "Ash"])
    writer.writerow([3, "Gary"])
    writer.writerow([3, "Brock"])
    writer.writerow([4, "Ash"])
    writer.writerow([1, "Gary"])
    writer.writerow([3, "Brock"])

popular = pd.read_csv('popular.csv')

dic={}

for i in popular['Course']:
  if i not in dic:
    dic[i] = 1
  else:
    dic[i]+=1

print(dic)
ranks=[]

for i in dic:
  ranks.append([i,dic[i]])


ranks.sort(key=lambda x:x[1])

for i in ranks:
  if(i[1]>=3):
    print(df['Course Name'][i[0]])

# Organization Based recommendation





John_skills = ['javascript']
Buddha_skills = ['stock']

req_skills = John_skills + Buddha_skills

for i in profile_predict(req_skills):
  print(i)

# Pre Requisiste

print(df['Course Name'][16])

temp = df['Skills'][16].split("  ")

pre_req = [item for item in temp if item not in user_skills]

for i in profile_predict(pre_req):
  if(i!=df['Course Name'][16]):
    print(i)

user_level = {'Buddha':'Beginner','Aditya' : 'Expert'}

j=0

print("Beginnner Level Top 10 Recommended Courses:-")

for i in range(len(df)):
  if(df['Difficulty Level'][i] == user_level['Buddha'] and j < 10):
    print(df['Course Name'][i])
    j += 1







